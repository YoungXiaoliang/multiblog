<section class="study-content-box">
    <h2><span>入门篇</span></h2>
    <!--目录-->
    <nav class="catalog-nav fl" >
        <ul class="tree study-list-first">
            <li class="active catalog-list">
                <a href="javascript:;" class="catalog-list-name" onclick="clickCatalogName('catalog1')">第1章    初识Express</a>
                <ul class="study-list-second" >
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog1-1')">1.1  JavaScript革命</a>
                    </li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog1-2')">1.2  初识Express</a>
                    </li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog1-3')">1.3  Express简史</a>
                    </li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog1-4')">1.4  升级到Express 4.0</a>
                    </li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog1-5')">1.5  Node：一种新型Web服务器</a>
                    </li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog1-6')">1.6  Node的生态系统</a>
                    </li>
                </ul>
            </li>
            <li class="catalog-list">
                <a href="javascript:;" class="catalog-list-name" onclick="clickCatalogName('catalog2')">第2章   从Node开始</a>
                <ul class="study-list-second" >
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog2-1')">2.1  获取Node</a></li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog2-2')">2.2  使用终端</a></li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog2-3')">2.3  编辑器</a></li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog2-4')">2.4  npm</a></li>
                    <li><a href="javascript:;" onclick="clickCatalogName('catalog2-5')">2.5  用Node实现的简单Web服务器</a>
                        <ul class="study-list-third">
                            <li><a href="javascript:;" onclick="clickCatalogName('catalog2-5-1')">2.5.1 Hello World</a></li>
                            <li><a href="javascript:;" onclick="clickCatalogName('catalog2-5-2')">2.5.2 事件驱动编程</a></li>
                            <li><a href="javascript:;" onclick="clickCatalogName('catalog2-5-3')">2.5.3 路由</a></li>
                            <li><a href="javascript:;" onclick="clickCatalogName('catalog2-5-4')">2.5.4 静态资源服务</a></li>
                        </ul>
                    </li>
                    <li><a href="javascript:;">2.6  走向Express</a></li>
                </ul>
            </li>
            <li class="catalog-list">
                <a href="javascript:;" class="catalog-list-name" onclick="clickCatalogName(1000)">第3章 省时省力的Express</a>
                <ul class="study-list-second">
                    <li><a href="javascript:;">3.1 脚手架</a></li>
                    <li><a href="javascript:;">3.2 草地鹨旅行社网站</a></li>
                    <li><a href="javascript:;">3.3 初始步骤</a>
                        <ul class="study-list-third">
                            <li><a href="javascript:;">3.3.1 视图和布局</a></li>
                            <li><a href="javascript:;">3.3.2 视图和静态文件</a></li>
                            <li><a href="javascript:;">3.3.3 视图中的动态内容</a></li>
                        </ul>
                    </li>
                    <li><a href="javascript:;">3.4 结论</a></li>
                </ul>
            </li>
            <li class="catalog-list">
                <a href="javascript:;" class="catalog-list-name">第4章 工欲善其事，必先利其器</a>
                <ul class="study-list-second" >
                    <li><a href="javascript:;">4.1 最佳实践</a></li>
                    <li><a href="javascript:;">4.2 版本控制</a></li>
                    <li><a href="javascript:;">4.3 针对本书如何使用Git</a>
                        <ul class="study-list-third">
                            <li><a href="javascript:;">4.3.1 如果你要自己动手</a></li>
                            <li><a href="javascript:;">4.3.2 如果你要使用官方存储库</a></li>
                        </ul>
                    </li>
                    <li><a href="javascript:;">4.4 npm包</a></li>
                    <li><a href="javascript:;">4.5 项目元数据</a></li>
                    <li><a href="javascript:;">4.6 Node模块</a></li>
                </ul>
            </li>
            <li class="catalog-list">
                <a href="javascript:;" class="catalog-list-name">第5章 质量保证</a>
                <ul class="study-list-second" >
                    <li><a href="javascript:;">5.1 QA：值得吗</a></li>
                    <li><a href="javascript:;">5.2 逻辑与展示</a></li>
                    <li><a href="javascript:;">5.3 测试的类型</a></li>
                    <li><a href="javascript:;">5.4 QA技术概览</a></li>
                    <li><a href="javascript:;">5.5 运行你的服务器</a></li>
                    <li><a href="javascript:;">5.6 页面测试</a></li>
                    <li><a href="javascript:;">5.7 跨页测试</a></li>
                    <li><a href="javascript:;">5.8 逻辑测试</a></li>
                    <li><a href="javascript:;">5.9 去毛</a></li>
                    <li><a href="javascript:;">5.10 链接检查</a></li>
                    <li><a href="javascript:;">5.11 用Grunt实现自动化</a></li>
                    <li><a href="javascript:;">5.12 持续集成</a></li>
                </ul>
            </li>
        </ul>
    </nav>
    <!--章节内容-->
    <div class="study-content fr">
        <div class="chapter-box"  id="catalog1">
            <div class="chapter-top">
                <h2>第1章</h2>
                <h1>初识Express</h1>
            </div>
            <div class="chapter-content">
                <div class="section-box" id="catalog1-1">
                    <h3 class="section-top">1.1 JavaScript革命</h3>
                    <div class="section-content">
                        <p>JavaScript 的时代真的来临了。最开始它只是一种粗陋的客户端脚本语言，但现在它不仅
                            是客户端普遍使用的脚本语言，甚至还因为 Node 的出现最终成为了服务器端脚本语言</p>
                        <p>全部由 JavaScript 组成的技术栈前景非常明朗：不再需要环境切换！你再也不需要从
                            JavaScript 的思维模式切换到 PHP、C#、Ruby 或 Python（或其他任何服务器端语言）。此
                            外，它还让前端工程师一跃进入了服务器端编程领域。当然，这并不是说服务器端编程只
                            和语言有关，仍然有很多东西需要学习。但有了 JavaScript，至少语言不再是障碍了。</p>
                        <p>2009 年，人们早已经认识到 JavaScript 作为浏览器脚本语言非常强大，具有很强的表现能
                            力，这时，Ryan Dahl 看到了 JavaScript 作为服务器端语言的潜力，于是 Node 诞生了。这
                            是一个互联网技术生机勃勃的时代。Ruby（和 RoR）吸收了学院派计算机科学的一些伟大
                            思想，并结合了自有的一些新想法，推出了一种更快捷的网站及 Web 应用程序构建方式。
                            微软也通过奋勇作战在互联网时代争得了一席之地，借助 .NET 取得了惊人的成就，它不
                            仅借鉴了 Ruby 和 JavaScript 的优点，还从 Java 犯的错误中吸取了经验，并充分吸收了学
                            术殿堂中的精髓。</p>
                        <p>徜徉在互联网技术中令人感到兴奋，到处都是令人惊奇的新想法（或者复兴的旧思想）。
                            现在的创新精神和新鲜事物比过去的这许多年要更强、更多。</p>
                    </div>
                </div>
                <div class="section-box" id="catalog1-2">
                    <h3 class="section-top">1.2 初识Express</h3>
                    <div class="section-content">
                        <p>
                            Express 网站上是这样介绍 Express 的：“精简的、灵活的 Node.js Web 程序框架，为构建单
                            页、多页及混合的 Web 程序提供了一系列健壮的功能特性。”这究竟是什么意思呢？下面
                            我们来逐一解读一下。
                        </p>
                        <li>精简</li>
                        <div class="sketch-para">
                            <p>这是 Express 最吸引人的特性之一。框架开发者经常会忘掉“少即是多”这一基本原
                                则。Express 的哲学是在你的想法和服务器之间充当薄薄的一层。这并不意味着它不够
                                健壮，或者没有足够的有用特性，而是尽量少干预你，让你充分表达自己的思想，同时
                                提供一些有用的东西。</p>
                        </div>
                        <li>灵活</li>
                        <div class="sketch-para">
                            <p>Express 哲学中的另一个关键点是可扩展。Express 提供了一个非常精简的框架，你可以
                                根据自己的需要添加 Express 功能中的不同部分，替换掉不能满足需要的部分。这种做
                                法很新鲜。很多框架把什么都给你了，一行代码还没写，你拥有的就已经是一个臃肿、
                                神秘而复杂的项目了。通常，你的第一项任务就是把不需要的功能砍掉，或者替换掉不
                                能满足需求的功能。Express 则采取了截然不同的方式，让你在需要时才去添加东西。</p>
                        </div>
                        <li>Web程序框架</li>
                        <div class="sketch-para">
                            <p>这里需要琢磨一下语义了。什么是 Web 程序？这意味着 Express 就不能做出网站或者
                                网页了吗？不，网站是 Web 程序，网页也是 Web 程序。但 Web 程序的含义不止这些，
                                它还可以向其他 Web 程序提供功能（还有别的）。一般而言，“程序”是具有功能的，
                                它不止是内容的静态集合（尽管这也是非常简单的 Web 程序）。尽管现在“程序”（在
                                你的设备本地运行的东西）和“网页”（通过网络为你的设备服务的东西）之间有明显
                                的界限，但这种界限渐渐变得模糊了，这要感谢 PhoneGap 这样的项目，同时也要感谢
                                微软允许 HTML5 像本地应用程序一样在桌面上运行。不难想象，几年之内程序和网站
                                之间的界限将不复存在。</p>
                        </div>
                        <li>单页Web程序</li>
                        <div class="sketch-para">
                            <p>单页 Web 程序是比较新颖的想法。不像之前的网站，用户每次访问不同的页面都要发
                                起网络请求，单页 Web 程序把整个网站（或很大一部分）都下载到客户端浏览器上。
                                经过初始下载后，用户访问不同页面的速度更快了，因为几乎不需要或者只要很少的服
                                务端通信。单页程序的开发可以使用 Angular 或 Ember 等流行框架，Express 跟它们都
                                配合得很好。</p>
                        </div>
                        <li>多页和混合的Web程序</li>
                        <div class="sketch-para">
                            <p>多页 Web 程序是更传统的方式。网站上的每个页面都是通过向服务器发起单独的请求
                                得到的。这种方式确实比较传统，但这并不意味着它没有优点，或者说单页程序更好。
                                只是现在有更多选择了，你可以决定哪些内容应该作为单页程序提供，哪些应该通过不
                                同的请求提供。“混合”说的就是同时使用这两种方式的网站。</p>
                        </div>
                    </div>
                </div>
                <div class="section-box" id="catalog1-3">
                    <h3 class="section-top">1.3　Express简史</h3>
                    <div class="section-content">
                        <p>Express 的缔造者 TJ Holowaychuk 说 Express 是在 Sinatra 的启发下创建的，后者是一个基
                            于 Ruby 的框架。Express 借鉴一个在 Ruby 上构建的框架并不奇怪：Ruby 致力于让 Web
                            开发变得更快、更高效、更可维护，并衍生了大量的 Web 开发方式。</p>
                        <p>除了 Sinatra，Express 跟 Connect 也有非常紧密的联系，Connect 是一个 Node 的“插件”
                            库。Connect 创造了“中间件”（middleware）这个术语来描述插入式的 Node 模块，它能
                            在不同程度上处理 Web 请求。在版本 4.0 之前，Express 一直是绑定 Connect 的；在版本
                            4.0 中，Connect（以及除 static 之外的所有中间件）被去掉了，以便这些中间件可以各自
                            独立升级。</p>
                    </div>
                </div>
                <div class="section-box" id="catalog1-4">
                    <h3 class="section-top">1.4　升级到Express 4.0</h3>
                    <div class="section-content">
                        <p>如果你用过 Express 3.0，知道可以毫不费力地升级到 Express 4.0 应该会很高兴。如果你刚
                            接触 Express，可以直接跳过这一节。对于用过 Express 3.0 的读者，请注意以下几个重点。</p>
                        <div class="sketch-para dot-in-front">
                            <p>
                                Connect已经从 Express 中去掉了，所以除了 static 中间件，你需要自己安装相应的开
                                发包（即 connect ）。与此同时，Connect 将一些中间件移到了它自己的包内，所以你可
                                能要在 npm 上搜一下，看看你需要的中间件到哪去了。
                            </p>
                            <p>body-parser现在有自己的包了，它不再包含 multipart 中间件，因而也关闭了一个重
                                大的安全漏洞。现在可以放心使用 body-parser 中间件了。</p>
                            <p>不必再将 Express router 链接到程序里。所以应该从已有的 Express 3.0 中去掉app.
                                use(app.router)。</p>
                            <p>app.configure被去掉了，只要检查 app.get(env) （用 switch 或 if 语句）就可以取代
                                该方法</p>
                        </div>
                        <p>更多细节请参阅官方迁移指南（https://github.com/strongloop/express/wiki/Migrating-from-3.
                            x-to-4.x）。</p>
                        <p>Express 是一个开源项目，主要还是由 TJ Holowaychuk 开发及维护</p>
                    </div>
                </div>
                <div class="section-box" id="catalog1-5">
                    <h3 class="section-top">1.5　Node：一种新型Web服务器</h3>
                    <div class="section-content">
                        <p>从某种角度看，Node 跟其他流行的 Web 服务器，比如微软的互联网信息服务（IIS）或
                            Apache，有很多共同点。然而更有趣的是探究它的不同之处，所以我们先从讨论它的不同
                            开始。</p>
                        <p>Node 实现 Web 服务器的方式跟 Express 很像，也非常精简。Node 的搭建和配置非常容易，
                            不像 IIS 或 Apache 要花费多年的时间才能掌握。但要让 Node 服务器在生产环境中发挥出</p>
                        <p>最优性能，进行调优也绝非易事，只不过是配置选项更简单，也更直接了。</p>
                        <p>Node 和传统的 Web 服务器之间的另一个主要区别是：Node 是单线程的。乍一看可能觉得
                            这是一种倒退。但事实证明，这是天才之举。单线程极大地简化了 Web 程序的编写，如
                            果你需要多线程程序的性能，只需启用更多的 Node 实例，就可以得到多线程的性能优势。
                            精明的读者可能会觉得我这是在放烟幕弹。毕竟，通过服务器并行（相对于程序的并行）
                            的多线程只是把复杂性转移了，并没有消除它啊？也许吧，但依我之见，它是把复杂性放
                            到了它应该存在的地方。更进一步说，随着云计算的日益流行，以及将服务器当作普通商
                            品看待的趋势越来越明显，这种方式也变得更有意义了。IIS 和 Apahce 确实强大，并且它
                            们的设计目标也是要榨取如今强大的硬件设施的最后一点性能。但那是需要付出代价的，
                            即它需要相当专业的设置和调优才能榨取那种性能。</p>
                        <p>至于编写程序的方式，相较于 .NET 或 Java 程序，Node 程序更像 PHP 或 Ruby。尽管
                            Node 所用的 JavaScript 引擎（谷歌的 V8）确实会将 JavaScript 编译为本地机器码（更像
                            C 或 C++），但这一操作是透明的
                            1 ，所以从用户的角度来看，它表现的还是像纯粹的解释
                            型语言一样。没有单独的编译步骤，这减少了维护和部署的麻烦。你所要做的只是更新
                            JavaScript 文件，然后你的修改就自动生效了。</p>
                        <p>Node 程序的另一个好处是它的平台无关性。它不是第一个或唯一的平台无关的服务器技
                            术，但平台无关的水平真的是良莠不齐。例如，你可以借助 Mono 在 Linux 上运行 .NET
                            程序，但这个过程会很痛苦。同样，你可以在 Windows 服务器上运行 PHP 程序，但一般
                            不像在 Linux 机器上设置那么容易。另一方面，在所有主流操作系统（Windows、OS X 和
                            Linux）上设置 Node 都易如反掌，并且协作也很容易。在网站设计团队中，经常会同时出
                            现 PC 和 Mac。某些平台，比如 .NET，对经常使用 Mac 的前端开发人员和设计师来说是
                            个挑战，会极大地影响协作性和工作效率。用几分钟（甚至几秒钟）的时间在任意一个操
                            作系统上构建一个可运行服务器的梦想终于实现了。</p>
                    </div>
                </div>
                <div class="section-box" id="catalog1-6">
                    <h3 class="section-top">1.6　Node的生态系统</h3>
                    <div class="section-content">
                        <p>当然，Node 处于这个技术栈的核心位置。就是它让 JavaScript 从浏览器中分离出来，得以
                            在服务器上运行，进而可以使用 JavaScript 写成的框架（比如 Express）。另外一个重要的
                            组件是数据库，这将在第 13 章中进行详细介绍。除了最简单的 Web 程序，所有的程序都
                            需要数据库，并且 Node 生态系统中的数据库更多。</p>
                        <p>所有主流关系型数据库（MySQL、MariaDB、PostgreSQL、Oracle、SQL Server）的接口都
                            有，这一点并不奇怪，因为忽视那些已经成熟的“巨无霸”太不明智了。然而 Node 开发
                            的出现带动了一种新式的数据库存储方式，这种方式被称为“NoSQL 数据库”。用否定的</p>
                        <p>方式来下定义有时并不恰当，所以我们更准确地称之为“文档数据库”或“键 / 值对数据
                            库”。它们提供了一种概念上更简单的数据存储方式。这种数据库有很多，但 MongoDB 是
                            其中的佼佼者，也是我们要在本书中使用的数据库。</p>
                        <p>因为构建一个功能性网站要借助很多种技术，因此衍生了一种用来描述网站构建基础“技
                            术栈”的缩略语。比如说，Linux、Apache、MySQL 和 PHP 被称为 LAMP 栈。MongoDB
                            的工程师 Valeri Karpov 发明了一个缩略语 MEAN，指代 Mongo、Express、Angular 和
                            Node。尽管它确实朗朗上口，却有其局限性：可选的数据库和应用程序框架有很多，
                            MEAN 无法体现这个生态系统的多样性（它还漏掉了一个我认为非常重要的组件：模板
                            引擎）。</p>
                        <p>发明一个兼容并包的缩略语是一个有趣的事情。其中无可替代的组件当然是 Node。尽管
                            还有其他的服务器端 JavaScript 容器，但 Node 是其中的执牛耳者。尽管 Express 在主导地
                            位上接近 Node，但它也不是唯一可用的 Web 程序框架。另外两个通常来说对 Web 程序开
                            发必不可少的组件是数据库服务器和模板引擎（模板引擎提供了 PHP、JSP 或 Razor 自带
                            的功能：将代码和标记输出无缝结合起来）。对于最后两种组件而言，没有明显的领跑者，
                            我认为对此加以限制有害无益。</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="chapter-box" id="catalog2">
            <div class="chapter-top">
                <h2>第2章</h2>
                <h1>从Node开始</h1>
            </div>
            <div class="chapter-content">
                <div class="section-box" id="catalog2-1">
                    <p>如果你从来没接触过 Node，这一章就是为你而准备的。掌握 Express 及其实用性需要对
                        Node 有基本的认识。如果你用 Node 开发过 Web 程序，则可以跳过本章。在本章中，我
                        们会用 Node 构建一个非常小的 Web 服务器，然后在下一章中介绍如何用 Express 完成相
                        同的任务。</p>
                    <h3 class="section-top">2.1　获取Node</h3>
                    <div class="section-content">
                        <p>在系统上安装 Node 非常简单。Node 团队做了很多努力，以确保在所有主流平台上都能简
                            单直接地安装 Node。</p>
                        <p>安装过程非常简单，实际上，它可以总结为以下三个简单的步骤：</p>
                        <div class="example-para">
                            <p>(1) 进入 Node 的首页（http://nodejs.org）。</p>
                            <p>(2) 点击写着“INSTALL”的绿色大按钮。</p>
                            <p>(3) 按照指令安装。</p>
                        </div>
                        <p>在 Windows 和 OS X 上，会下载一个安装器，引导你完成整个安装过程。在 Linux 上，如
                            果你用了包管理器（https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager），
                            可能会更快地完成安装并运行。</p>
                        <p class="tip-para">
                            如果你是 Linux 用户，并且要用包管理器，一定要遵循之前提到的网页上的
                            指令。如果你不加上恰当的包存储库，很多 Linux 发行版都会安装一个非常
                            古老的 Node 版本。
                        </p>
                        <p>
                            你也可以下载一个独立的安装器（http://nodejs.org/download/），在你向组织内部分发 Node
                            时会有帮助。
                        </p>
                        <p>如果你在构建 Node 时遇到困难，或者因为某些原因想从头开始构建 Node，请参考官方安
                            装指南（http://www.joyent.com/blog/installing-node-and-npm/）。</p>
                    </div>
                </div>
                <div class="section-box" id="catalog2-2">
                    <h3 class="section-top">2.2　使用终端</h3>
                    <div class="section-content">
                        <p>我痴迷于终端（也叫“控制台”或“命令行”）的强大和高效。本书的所有例子都假定你
                            已使用终端。如果你不熟悉你的终端，我强烈建议你花些时间去熟悉它。本书中的很多工
                            具都有 GUI 界面，所以如果你确实不想使用终端，你有自己的选择权，但你就只能靠自己
                            去学习了。</p>
                        <p>如果你用的是 OS X 或 Linux，有大量历史悠久的 shell（终端命令解释器）可供选择。尽
                            管 zsh 也有它自己的追随者，但目前最流行的还是 bash。我之所以被 bash 吸引，（除了接
                            触时间长之外）主要是因为它的普遍性。在基于 Unix 的机器上，默认的 shell 有 99% 的可
                            能是 bash。</p>
                        <p>如果你是 Windows 用户，事情就没有那么美好了。微软从不注重在终端上提供令人愉悦
                            的体验，所以你只能多做点工作。Git 中包含一个“Git bash” shell，提供了类似于 Unix 的
                            终端体验（它只有常见 Unix 命令行工具的一个子集，但这个子集很实用）。尽管 Git bash
                            提供了一个精简的 bash shell，但它用的仍然是内置的 Windows 控制台程序，因此用起来
                            也比较费力（即便像重置控制台窗口大小、选择文本、剪切和粘帖这些简单的功能都是不
                            直观和笨拙的）。因此我推荐你安装 Console2（http://sourceforge.net/projects/console/）或
                            ConEmu（https://github.com/Maximus5/ConEmu）这些更精致的控制台。对于 Windows 的
                            超级用户，特别是 Windows 系统的 .NET 开发人员，或者骨灰级 Windows 系统和网络的
                            管理员，还有另外一个选择：微软自己的 PowerShell。PowerShell 名符其实，人们可以用
                            它做出非凡的事情，并且技艺娴熟的 PowerShell 用户跟 Unix 命令行大师旗鼓相当。然而，
                            如果你要在 OS X/Linux 和 Windows 之间切换，出于一致性上的考虑，我建议你还是用 Git
                            bash 吧。</p>
                        <p>Windows 用户还有一种选择：虚拟化。因为现代计算机的架构和能力，虚拟机（VM）的
                            性能实际上已经足以媲美真正的机器了。我们非常幸运能有 Oracle 的免费 VirtualBox，并
                            且 Windows 8 内置了对 VM 的支持。另外，有了像 Dropbox 这样基于云的文件存储，并
                            且 VM 存储和主机存储之间的桥接也很容易，虚拟化更加有吸引力了。与其用 Git bash 给
                            Windows 羸弱的控制台支持打补丁，还不如用 Linux VM 做开发。如果你觉得 UI 不像你
                            想象的那么平滑，可以使用像 PuTTY（http://www.putty.org/）这样的终端程序，我经常这
                            么做。</p>
                        <p>最后，不管你用什么系统，都可以使用优秀的 Codio（https://codio.com/）。Codio 是个网
                            站，它可以为你的每个项目起一个新的 Linux 实例，还可以提供一个 IDE 和命令行，并且
                            Node 也已经安装完毕。它真的非常好用，是快速进入 Node 的极佳方式。</p>
                        <p class="tip-para">
                            如果你在安装 npm 包时指定 -g （全局）选项，它们会被装在你的 Windows
                            主目录的一个子目录下。我发现如果你的用户名中有空格（我的用户名过去
                            是“Ethan Brown”，现在是“ethan.brown”），很多包都会出现问题。出于安
                            全考虑，我建议你选一个没有空格的 Windows 用户名。如果你已经用带有空
                            格的用户名了，建议你创建一个新用户，然后将你的文件传给新账号。重命
                            名你的 Windows 主目录也不是不可能，但充满了危险。
                        </p>
                        <p>一旦你选定了自己喜欢的 shell，建议你花些时间熟悉一下与它相关的基础知识。网上有很
                            多精彩的教程，你现在应该学习一下，毕竟磨刀不误砍柴工。至少你应该知道如何切换目
                            录，如何复制、移动和删除文件，以及如何中断一个命令行程序（通常是 Ctrl-C）。如果你
                            想变成终端高手，我建议你学一学如何在文件中搜索文本，如何搜索文件和目录，如何把
                            命令链在一起（老式的“Unix 理念”），以及如何重定向输出。</p>
                        <p class="tip-para">在很多类 Unix 的系统上，Ctrl-S 都有特殊的含义：它会“冻结”终端（它曾
                            经被用来暂停快速滚动）。因为“保存”一般也是用这个快捷键，所以经常
                            会有人不假思索地按下这个快捷键，结果大多数人都会被搞糊涂（我也经常
                            犯这个错误）。解冻终端是用 Ctrl-Q，所以如果你忽然发觉终端看起来被冻
                            结了，试一下 Ctrl-Q，看能不能释放它。</p>
                    </div>
                </div>
                <div class="section-box" id="catalog2-3">
                    <h3 class="section-top">2.3　编辑器</h3>
                    <div class="section-content">
                        <p>很少有话题能像选择编辑器一样在程序员中引起热烈的讨论，其中缘由便是：编辑器是
                            最主要的工具。我用的编辑器是 vi 1 （或者带 vi 模式的编辑器）。并非所有人都喜欢使用 vi
                            （当我告诉同事用 vi 多么容易实现他们在做的事情时，总是会招致他们的白眼），但找一
                            款强大的编辑器并学会如何使用它无疑会极大地提高你的生产率，并且你会享受到个中趣
                            味。我特别喜欢 vi 的原因之一（尽管谈不上是最重要的原因）是它跟 bash 一样，也是普
                            遍存在的。只要你访问 Unix 系统（包括 Cygwin），就能找到 vi。很多流行的编辑器（即
                            便是微软的 Visual Studio ！）都有 vi 模式。一旦你习惯了 vi，很难想象还会用其他的编辑
                            器。刚开始接触 vi 时会觉得比较难，但回报是很可观的</p>
                        <p>尽管知道控制台编辑器（比如 vi 或 Emacs）可以变得极其方便顺手，你或许还是想要一
                            个更现代化的编辑器。我一些做前端的同事喜欢 Coda，我相信他们的选择。可惜 Coda 只
                            能用在 OS X 上。Sublime Text 是一个强大的现代化编辑器，也有出色的 vi 模式，并且在
                            Windows、Linux 和 OS X 上都能使用。</p>
                        <p>Windows 上还有一些很好的免费选择。TextPad 和 Notepad++ 都有它们的支持者。它们都
                            是很强的编辑器，并且你无法抗拒它们的价格诱惑。如果你是 Windows 用户，不要忽视将
                            Visual Studio 作为 JavaScript 编辑器：它非常地强大，并且它的 JavaScript 自动补足引擎可
                            以称得上是最好的。你可以在微软的官网上免费下载 Visual Studio Express。</p>
                    </div>
                </div>
                <div class="section-box" id="catalog2-4">
                    <h3 class="section-top">2.4　npm</h3>
                    <div class="section-content">
                        <p>npm 是随处可见的 Node 开发包管理器（我们就是用它获取并安装 Express 的）。“npm”跟
                            PHP、GNU、WINE 等那些古怪的传统名字不一样，它不是首字母缩写（所以也没有大
                            写），而是“npm 不是缩写”的递归缩写。</p>
                        <p>从广义上来说，包管理器的两个主要职责是安装开发包和管理依赖项。npm 是一个快速、
                            高能并且毫不费力的包管理器，在 Node 生态系统的高速成长和多样化过程中发挥了重要
                            作用。</p>
                        <p>当你安装 Node 时就把 npm 装上了，所以如果你是按照前面列出来的步骤安装的 Node，你
                            已经有 npm 了。那么我们开始工作吧！</p>
                        <p>在使用 npm 时，（毫无悬念）最主要的命令是 install 。比如要安装 Grunt（一个流行的
                            JavaScript 任务执行器），你将会（在控制台里）发起下面这个命令：</p>
                        <pre class="code-para">npm install -g grunt-cli</pre>
                        <p>标记 -g 的意思是告诉 npm 这个包要全局安装，即系统全局都可以访问它。在我们讨论
                            package.json 文件时，这种区别会更明显。就目前而言，JavaScript 工具（比如 Grunt）一
                            般是全局安装的，但你的 Web 程序或项目专用的开发包则不是。</p>
                        <p class="tip-para">不像 Python 语言——从 2.0 升级到 3.0 发生了重大变化，有必要提供一种
                            在不同环境中切换的办法——Node 平台太新了，你很可能总是用最新版的
                            Node。然而，如果你发现自己确实需要支持多个版本的 Node，有个 nvm
                            （https://github.com/creationix/nvm）项目，可以用它切换环境。</p>
                    </div>
                </div>
                <div class="section-box" id="catalog2-4">
                    <h3 class="section-top">2.5　用Node实现的简单Web服务器</h3>
                    <div class="section-content">
                        <p>如果你之前曾经做过静态的 HTML 网站，或者有 PHP 或 ASP 背景，可能习惯用 Web 服务
                            器（比如 Apache 或 IIS）提供静态文件服务，以便使用浏览器通过网络查看这些文件。比
                            如说，如果你创建了一个名为 about.html 的文件，并把它放到了恰当的目录下，然后就可
                            以访问 http://localhost/about.html 查看这个文件。根据 Web 服务器的配置，你甚至可以省
                            略 .html，但 URL 和文件名之间的关系很清晰：Web 服务器知道文件在机器的哪个地方，
                            并能把它返回给浏览器。</p>
                        <p class="tip-para">从 localhost 的名字就能看出来，它指的是你所在的机器。这是 IPv4 回环地
                            址 127.0.0.1 或者 IPv6 回环地址 ::1 的常用别名。你应该更常见到 127.0.0.1，
                            不过本书中用的是 localhost。如果你用的是远程的机器（比如通过 SSH 访问
                            的），记得浏览 localhost 时访问的不是你眼前的那台机器。</p>
                        <p>Node 所提供的范式跟传统的 Web 服务器不同：你写的程序就是 Web 服务器。Node 只是
                            给你提供了一个构建 Web 服务器的框架。</p>
                        <p>你可能会说“但我不想写 Web 服务器”。这是很自然的反应：你想写一个程序，而不是
                            Web 服务器。然而在 Node 里编写 Web 服务器非常简单（甚至只需要几行代码），并且你
                            因此取得了对程序的控制权，这是非常值得的。</p>
                        <div class="sketch-para dot-in-font">
                            <p></p>
                        </div>
                        <div class="lesson-box" id="catalog2-5-1">
                            <h5 class="lesson-top">2.5.1　Hello World</h5>
                            <p>我发现正规的编程入门范例总是输出毫无创意的“Hello World”消息。但打破这样的传统
                                似乎是不敬之举，所以我们也从这里开始吧，然后再去做一些更有趣的事情。</p>
                            <p>用你喜欢的编辑器创建一个 helloWorld.js 文件：</p>
                            <pre class="code-para"><ol><li><span>var http = require('http');</span></li><br><li><span>http.createServer(function(req,res){</span></li><li><span>    res.writeHead(200, { 'Content-Type': 'text/plain' });</span></li><li><span>    res.end('Hello world!');</span></li><li><span>}).listen(3000);</span></li><br><li><span>console.log('Server started on localhost:3000; press Ctrl-C to terminate....');</span></li></ol></pre>
                            <p>确保是和 helloWorld.js 在同一个目录下，输入 node hello World.js 。然后打开浏览器访问
                                http://localhost:3000，你的第一个 Web 服务器就建成啦！这个服务器并没有返回 HTML，
                                而只是向你的浏览器传递了一条普通的文本消息“Hello world!”。如果你想要尝试发送HTML，可以试验一下：只要把 text/plain 换成 text/html ，再把 'Hello world!' 换成一
                                个包含有效 HTML 的字符串就行了。在这里就不演示了，因为我要尽量避免在 JavaScript
                                里写 HTML，至于原因，我们会在第 7 章深入探讨</p>
                        </div>
                        <div class="lesson-box" id="catalog2-5-2">
                            <h5 class="lesson-top">2.5.2　事件驱动编程</h5>
                            <p>Node 的核心理念是事件驱动编程。这对程序员来说，意味着你必须知道有哪些事件，以
                                及如何响应这些事件。很多人接触事件驱动编程是从用户界面开始的：用户点击了什么，
                                然后你处理“点击事件”。这个类比很好，因为程序员不能控制用户什么时间点击或者是
                                否会点击，所以事件驱动编程真的很直观。在服务器上响应事件这种概念性的跳跃可能会
                                比较难，但原理是一样的。</p>
                            <p>在前面那个例子中，事件是隐含的：HTTP 请求就是要处理的事件。 http.createServer 方
                                法将函数作为一个参数，每次有 HTTP 请求发送过来就会调用那个函数。我们这个简单的
                                程序只是把内容类型设为普通文本，并发送字符串“Hello world!”。</p>
                        </div>
                        <div class="lesson-box" id="catalog2-5-3">
                            <h5 class="lesson-top">2.5.3　路由</h5>
                            <p>路由是指向客户端提供它所发出的请求内容的机制。对基于 Web 的客户端 / 服务器端程序
                                而言，客户端在 URL 中指明它想要的内容，具体来说就是路径和查询字符串（第 6 章会
                                详细讲解 URL 的组成部分）。</p>
                            <p>我们扩展一下“Hello world!”那个例子，做些更有意思的事情。做一个有首页、关于页面
                                和未找到页面的极其简单的网站。目前我们还像之前那个例子一样，不提供 HTML，只提
                                供普通文本：</p>
                            <pre class="code-para"><ol><li><span>var http = require('http');</span></li><br><li><span>http.createServer(function(req,res){</span></li><li><span>  // 规范化 url，去掉查询字符串、可选的反斜杠，并把它变成小写</span></li><li><span>  var path = req.url.replace(/\/?(?:\?.*)?$/, '').toLowerCase();</span></li><li><span>  switch(path) {</span></li><li><span>      case '':</span></li><li><span>          res.writeHead(200, { 'Content-Type': 'text/plain' });</span></li><li><span>          res.end('Homepage');</span></li><li><span>          break;</span></li><li><span>      case '/about':</span></li><li><span>          res.writeHead(200, { 'Content-Type': 'text/plain' });</span></li><li><span>          res.end('About');</span></li><li><span>          break;</span></li><li><span>      default:</span></li><li><span>          res.writeHead(404, { 'Content-Type': 'text/plain' });</span></li><li><span>          res.end('Not Found');</span></li><li><span>          break;</span></li><li><span>    }</span></li><li><span>}).listen(3000);</span></li><br><li><span>console.log('Server started on localhost:3000; press Ctrl-C to terminate....');</span></li></ol></pre>
                        </div>
                    </div>
                </div>

                <div class="section-box">
                    <h3 class="section-top">1.1 </h3>
                    <div class="section-content">
                        <p></p>
                        <li></li>
                        <div class="sketch-para dot-in-font">
                            <p></p>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="clear"></div>
</section>

{{#section 'study-page-js'}}
    <script src="/javascripts/study-page.js"></script>
{{/section}}
